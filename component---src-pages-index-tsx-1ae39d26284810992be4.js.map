{"version":3,"sources":["webpack:///./node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteralLoose.js","webpack:///./src/components/LatestPost.tsx","webpack:///./src/components/PostCard.tsx","webpack:///./src/pages/index.tsx","webpack:///./src/utils/strTag.ts","webpack:///./src/components/Tags.tsx"],"names":["_taggedTemplateLiteralLoose","strings","raw","slice","LatestPost","props","slug","title","content","authorId","date","readingTime","tags","className","onClick","_e","navigate","to","dangerouslySetInnerHTML","__html","Tags","PostCard","oneline","BlogIndex","data","siteTitle","site","siteMetadata","posts","allMarkdownRemark","edges","Layout","location","map","node","fields","frontmatter","description","excerpt","key","text","author","id","rest","concat","forEach","str","index","dynChunk","replace","split","filter","Boolean","join","tag","Tag","children"],"mappings":"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","file":"component---src-pages-index-tsx-1ae39d26284810992be4.js","sourcesContent":["export default function _taggedTemplateLiteralLoose(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  strings.raw = raw;\n  return strings;\n}","import React from \"react\";\nimport { Link, navigate } from \"gatsby\";\nimport Tags from \"./Tags\";\n\ninterface IProps {\n  slug: string;\n  title: string;\n  content: string;\n  authorId: string;\n  date: string;\n  readingTime: string;\n  tags: Array<string>;\n}\n\nconst LatestPost = (props: IProps) => {\n  const { slug, title, content, authorId, date, readingTime, tags } = props;\n\n  function onClick(_e: React.MouseEvent<HTMLElement, MouseEvent>): void {\n    navigate(slug);\n  }\n\n  return (\n    <div\n      className=\"w-full sm:min-h-250 lg:w-1/3 bg-latestPostBg p-2 rounded-md shadow-sm flex flex-col px-4 justify-between\"\n      onClick={onClick}\n    >\n      <div>\n        <div className=\"text-primary pt-1\">\n          <h3 className=\"p-0\">\n            <Link to={slug}>{title}</Link>\n          </h3>\n        </div>\n\n        <div className=\"p-1 text-sm card-subheading-info\">\n          <div>\n            {`${date} | ${readingTime}`}\n            {` | by `}\n            <span className=\"font-bold text-secondary text-sm\">{authorId}</span>\n          </div>\n        </div>\n\n        <section className=\"mt-2\">\n          <p\n            className=\" text-xl mb-3\"\n            dangerouslySetInnerHTML={{ __html: content }}\n          />\n        </section>\n      </div>\n      <Tags tags={tags} className=\"!mt-auto pt-5 mb-2\" />\n    </div>\n  );\n};\n\nexport default LatestPost;\n","import React from \"react\";\nimport { Link, navigate } from \"gatsby\";\nimport Tags from \"./Tags\";\nimport { oneline } from \"../utils/strTag\";\n\n// TODO better define this structure\nexport interface IProps {\n  slug: string;\n  title: string;\n  content: string;\n  authorId: string;\n  date: string;\n  readingTime: string;\n  tags: Array<string>;\n}\n\nexport default function PostCard(props: IProps): JSX.Element {\n  const { slug, title, content, authorId, date, readingTime, tags } = props;\n\n  function onClick(_e: React.MouseEvent<HTMLElement, MouseEvent>): void {\n    navigate(slug);\n  }\n\n  return (\n    <article\n      onClick={onClick}\n      className={oneline`\n        bg-postBg p-3 rounded-md\n        border-b border-l border-gray-200 cursor-pointer \n        flex flex-col\n        space-y-1\n        sm:w-3/4\n        w-full\n        !mt-4\n        min-h-200\n    `}\n    >\n      <div className=\"\">\n        <h3 className=\"p-0\">\n          <Link to={slug}>{title}</Link>\n        </h3>\n        <div className=\"p-1 text-sm card-subheading-info\">\n          <div>\n            {`${date} | ${readingTime}`}\n            {` | by `}\n            <span className=\"font-bold text-secondary text-sm\">{authorId}</span>\n          </div>\n        </div>\n      </div>\n      <section>\n        <p dangerouslySetInnerHTML={{ __html: content }} />\n      </section>\n      <Tags tags={tags} className=\"!mt-auto pt-5 mb-2\" />\n    </article>\n  );\n}\n","import React from \"react\";\nimport { graphql, PageProps } from \"gatsby\";\n\nimport Layout from \"../components/Layout\";\nimport SEO from \"../components/Seo\";\nimport LatestPost from \"../components/LatestPost\";\n\nimport { IBlogIndexQuery } from \"../../graphql-types\";\nimport PostCard from \"../components/PostCard\";\n\nexport interface IProps extends PageProps<IBlogIndexQuery> {}\n\nexport default function BlogIndex(props: IProps) {\n  const { data } = props;\n  const siteTitle = data.site.siteMetadata.title;\n  const posts = data.allMarkdownRemark.edges;\n\n  return (\n    <Layout location={props.location} title={siteTitle}>\n      <div className=\"space-y-3 p-3 !pt-0 sm:!pt-5 lg:p-20\">\n        <SEO title=\"Randomleplants\" />\n        {/* hidden */}\n        <div className=\"hidden\">\n          <p className=\"sm:w-3/4 pl-2 mx-auto font-mono text-xl text-secondary\">\n            Latest:\n          </p>\n          <div className=\"sm:w-5/6 bg-latestPostContainerBg mx-auto flex flex-col lg:flex-row px-3 py-6 lg:space-x-2 space-y-5 lg:space-y-0 rounded-lg shadow-md mt-4\">\n            {posts.slice(0, 3).map(({ node }) => {\n              const slug = node.fields.slug;\n              const title = node.frontmatter.title || slug;\n              const content = node.frontmatter.description || node.excerpt;\n              const tags = node.frontmatter.tags;\n\n              return (\n                <LatestPost\n                  key={slug}\n                  slug={slug}\n                  title={title}\n                  content={content}\n                  date={node.frontmatter.date}\n                  readingTime={node.fields.readingTime.text}\n                  authorId={node.frontmatter.author.id}\n                  tags={tags}\n                />\n              );\n            })}\n          </div>\n          <p className=\"sm:w-3/4 pl-2 !mt-10 sm:!mt-14 !mb-4 mx-auto font-mono text-xl text-secondary\">\n            All Posts:\n          </p>\n        </div>\n\n        {/* main */}\n        <div className=\"flex flex-col items-center max-w-screen-xl mx-auto space-y-2\">\n          {posts.map(({ node }) => {\n            const slug = node.fields.slug;\n            const title = node.frontmatter.title || slug;\n            const content = node.frontmatter.description || node.excerpt;\n            const tags = node.frontmatter.tags;\n\n            return (\n              <PostCard\n                key={slug}\n                slug={slug}\n                title={title}\n                content={content}\n                date={node.frontmatter.date}\n                readingTime={node.fields.readingTime.text}\n                authorId={node.frontmatter.author.id}\n                tags={tags}\n              />\n            );\n          })}\n        </div>\n      </div>\n    </Layout>\n  );\n}\n\nexport const pageQuery = graphql`\n  query BlogIndex {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n            readingTime {\n              text\n            }\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n            tags\n            author {\n              id\n            }\n          }\n        }\n      }\n    }\n    allAuthorYaml {\n      nodes {\n        bio\n        id\n        twitter\n        github\n      }\n    }\n  }\n`;\n","/* simple function to remove newlines from a tagged tewplate string */\nexport function oneline(strings: TemplateStringsArray, ...rest: Array<string>) {\n  let concat = \"\";\n  strings.forEach((str, index) => {\n    const dynChunk = rest[index] || \"\";\n    concat += str + dynChunk;\n  });\n  return concat.replace(/\\n/g, \"\").split(\" \").filter(Boolean).join(\" \");\n}\n","import React from \"react\";\n\nexport interface IProps {\n  tags: Array<string>;\n  className?: string;\n}\n\nexport default function Tags({ tags, className }: IProps) {\n  return (\n    <div className={`flex flex-wrap -m-0.5 dark:-m-2  ${className}`}>\n      {tags.map((tag) => (\n        <Tag key={tag}>{`#${tag}`}</Tag>\n      ))}\n    </div>\n  );\n}\n\nexport interface ITagProps {\n  children: JSX.Element | string;\n}\n\nexport function Tag(props: ITagProps): JSX.Element {\n  return (\n    <span\n      className={`\n      m-0.5 rounded px-2\n      text-xs cursor-pointer\n      bg-tagBg\n      text-secondary\n      font-mono\n      pb-0\n      !py-1\n      `}\n    >\n      {props.children}\n    </span>\n  );\n}\n"],"sourceRoot":""}